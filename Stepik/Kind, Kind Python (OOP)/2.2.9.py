"""
Подвиг 9 (на закрепление). Вам требуется сформировать класс PathLines для описания маршрутов, состоящих из
линейных сегментов. При этом каждый линейный сегмент предполагается задавать отдельным классом LineTo.
Объекты этого класса будут формироваться командой:

line = LineTo(x, y)
где x, y - следующая координата линейного участка (начало маршрута из точки 0, 0).

В каждом объекте класса LineTo должны формироваться локальные атрибуты:

x, y - для хранения координат конца линии (начало определяется по координатам предыдущего объекта).

Объекты класса PathLines должны создаваться командами:

p = PathLines()                   # начало маршрута из точки 0, 0
p = PathLines(line1, line2, ...)  # начало маршрута из точки 0, 0
где line1, line2, ... - объекты класса LineTo.

Сам же класс PathLines должен иметь следующие методы:

get_path() - возвращает список из объектов класса LineTo (если объектов нет, то пустой список);
get_length() - возвращает суммарную длину пути (сумма длин всех линейных сегментов);
add_line(self, line) - добавление нового линейного сегмента (объекта класса LineTo) в конец маршрута.

Пояснение: суммарный маршрут - это сумма длин всех линейных сегментов, а длина каждого линейного сегмента определяется
как евклидовое расстояние по формуле:

L = sqrt((x1-x0)^2 + (y1-y0)^2)

где x0, y0 - предыдущая точка маршрута; x1, y1 - текущая точка маршрута.

Пример использования классов (эти строчки в программе писать не нужно):

p = PathLines(LineTo(10, 20), LineTo(10, 30))
p.add_line(LineTo(20, -10))
dist = p.get_length()
P.S. В программе требуется объявить только классы. На экран ничего выводить не нужно.

"""

import math


class PathLines:
    
    def __init__(self, *args):
        self.obj_list = []
        self.add_line(LineTo(0, 0))  # начало маршрута из точки 0, 0
        if args:
            for i in args:
                self.add_line(i)
    
    def get_path(self):
        """Возвращает список из объектов класса LineTo (если объектов нет, то пустой список)"""
        return self.obj_list
    
    def get_length(self):
        """Возвращает суммарную длину пути (сумма длин всех линейных сегментов);"""
        fin_len = 0
        len_list = len(self.obj_list)
        if len_list > 1:
            for i in range(1, len_list):
                fin_len += math.sqrt(
                    pow(self.obj_list[i].x - self.obj_list[i - 1].x, 2) + pow(
                        self.obj_list[i].y - self.obj_list[i - 1].y,
                        2))
            
            return fin_len
        else:
            return fin_len
    
    def add_line(self, line):
        """Добавление нового линейного сегмента (объекта класса LineTo) в конец маршрута"""
        self.obj_list.append(line)


class LineTo:
    def __init__(self, x, y):
        self.x = x
        self.y = y
